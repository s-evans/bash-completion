#!/usr/bin/env sh

# TODO: useful for isolating next level of options
# netsh interface ipv6 /? | sed -e '/ - /!d' -e 's/[ ]\+-.*//' -e 's/[^ ]\+ //' -e '/?/d' -e '/help/d' -e 's/^[ ]\+//'

# TODO: may not work, needs tested
_netsh_bridges()
{
    local options IFS
    IFS=$'\n'
    options=$(netsh bridge show adapter | sed -e '/^$/ d' -e 's/.\{47\}//' )
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_netsh_interface_gateway_ipv4()
{
    local options IFS
    IFS=$'\n'
    options=$(netsh interface ipv4 show addresses $1 | sed -e '/Default Gateway/!d' -e 's/^[A-z :]*//')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_netsh_interface_addresses_ipv4()
{
    local options IFS
    IFS=$'\n'
    options=$(netsh interface ipv4 show addresses $1 | sed -e '/IP/!d' -e 's/^[A-z :]*//')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_netsh_ipv4_neighbors()
{
    local options IFS
    IFS=$'\n'
    options=$(netsh int ip show ne ${1//\\/} | sed -e 's/ .*//' -e '/^[0-9]/!d')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_netsh_ipv4_routes()
{
    local options IFS
    IFS=$'\n'
    options=$(netsh int ip show route | sed -e 's/^\([^ ]\+[ ]\+\)\{3\}//' -e 's/[ ]\+/ /g' -e '/^[0-9]/!d' -e 's/[A-z].*//')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_netsh_interfaces()
{
    local options IFS
    IFS=$'\n'
    options=$(netsh interface show interface name= | sed -e '/^$/ d' -e 's/.\{47\}//' )
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_netsh_wlan_interfaces()
{
    local options IFS
    IFS=$'\n'
    options=$(netsh wlan show interfaces | sed -e '/[ ]\+Name[ ]\+: /! d' -e 's/[ ]\+Name[ ]\+: //')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_netsh_wlan_profiles()
{
    local options IFS
    IFS=$'\n'
    options=$(netsh wlan show profiles | sed -e '/^$/,/---/ d' -e '/<None>/ d' -e 's/.*: //')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_netsh_ipv6_subinterfaces()
{
    local options IFS
    IFS=$'\n'
    options=$(netsh interface ipv6 show subinterfaces level=verbose | sed -e '/^SubInterface/!d' -e 's/[^ ]\+ //' -e 's/[^ ]\+$//' -e 's/[ ]\+$//')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_netsh_ipv4_subinterfaces()
{
    local options IFS
    IFS=$'\n'
    options=$(netsh interface ipv4 show subinterfaces level=verbose | sed -e '/^SubInterface/!d' -e 's/[^ ]\+ //' -e 's/[^ ]\+$//' -e 's/[ ]\+$//')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_netsh()
{
    local cur prev words cword options IFS cmds
    _init_completion

    cur=$(printf '%q' "$cur")
    cmds=( ${words[@]::cword} ) 

    if [[ $cword -eq 1 ]]; then
        COMPREPLY=( $(compgen -W 'add advfirewall bridge delete dhcpclient
        dnsclient dump exec firewall help http interface ipsec lan namespace
        nap netio p2p ras rpc set show wfp winhttp winsock wlan' -- "$cur" ) )
        return
    fi

    # Command-specific arguments
    case ${words[1]} in

        add)
            if [[ $cword -eq 2 ]]; then
                options='helper'

            elif [[ $cword -eq 3 ]]; then
                options=$(command ls *.dll 2> /dev/null)

            fi
            ;;

        adv*) # advfirewall

            if [[ $cword -eq 2 ]]; then
                options="consec dump export firewall import mainmode monitor \
                    reset set show"
                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                return
            fi

            case ${words[2]} in

                c*) # consec
                    if [[ $cword -eq 3 ]]; then
                        options='add delete dump set show'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    # TODO: more detail
                    case ${words[3]} in

                        a*) # add
                            if [[ $cword -eq 4 ]]; then
                                options='rule'
                            fi
                            ;;

                        de*) # delete
                            if [[ $cword -eq 4 ]]; then
                                options='rule'
                            fi
                            ;;

                        se*) # set
                            if [[ $cword -eq 4 ]]; then
                                options='rule'
                            fi
                            ;;

                        sh*) # show
                            if [[ $cword -eq 4 ]]; then
                                options='rule'
                            fi
                            ;;

                    esac
                    ;;

                f*) # firewall
                    if [[ $cword -eq 3 ]]; then
                        options='add delete dump set show'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    # TODO: more detail
                    case ${words[3]} in

                        a*) # add
                            if [[ $cword -eq 4 ]]; then
                                options='rule'
                            fi
                            ;;

                        de*) # delete
                            if [[ $cword -eq 4 ]]; then
                                options='rule'
                            fi
                            ;;

                        set)
                            if [[ $cword -eq 4 ]]; then
                                options='rule'
                            fi
                            ;;

                        sh*) # show
                            if [[ $cword -eq 4 ]]; then
                                options='rule'
                            fi
                            ;;

                    esac
                    ;;

                main*) # mainmode
                    if [[ $cword -eq 3 ]]; then
                        options='add delete dump set show'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    # TODO: more detail
                    case ${words[3]} in

                        a*) # add
                            if [[ $cword -eq 4 ]]; then
                                options='rule'
                            fi
                            ;;

                        de*) # delete
                            if [[ $cword -eq 4 ]]; then
                                options='rule'
                            fi
                            ;;

                        se*) # set
                            if [[ $cword -eq 4 ]]; then
                                options='rule'
                            fi
                            ;;

                        sh*) # show
                            if [[ $cword -eq 4 ]]; then
                                options='rule'
                            fi
                            ;;

                    esac
                    ;;

                mon*) # monitor
                    if [[ $cword -eq 3 ]]; then
                        options='delete dump show'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in

                        de*) # delete
                            if [[ $cword -eq 4 ]]; then
                                options='mmsa qmsa'

                            elif [[ $cword -eq 5 ]]; then
                                # TODO: list possible sources
                                options='all'

                            elif [[ $cword -eq 6 ]]; then
                                # TODO: list possible destinations
                                options=''

                            fi
                            ;;

                        sh*) # show
                            if [[ $cword -eq 4 ]]; then
                                options="consec currentprofile firewall \
                                    mainmode mmsa qmsa"

                            elif [[ $cword -eq 5 ]]; then
                                # TODO: more detail
                                options=''

                            fi
                            ;;

                    esac
                    ;;

                set)
                    if [[ $cword -eq 3 ]]; then
                        options="allprofiles currentprofile domainprofile \
                            global privateprofile publicprofile"
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in

                        # privateprofile publicprofile domainprofile currentprofile allprofiles
                        pr*|pu*|d*|c*|a*)

                            if [[ $cword -eq 4 ]]; then
                                options='state firewallpolicy settings logging'
                                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                                return
                            fi

                            case ${words[4]} in

                                st*) # state
                                    if [[ $cword -eq 5 ]]; then
                                        options='on off notconfigured'
                                    fi
                                    ;;

                                f*) # firewallpolicy
                                    if [[ $cword -eq 5 ]]; then
                                        options="blockinbound blockinboundalways \
                                            allowinbound notconfigured \
                                            allowoutbound blockoutbound \
                                            notconfigured" 
                                    fi
                                    ;;

                                set*) # settings
                                    # TODO: more
                                    # Usage: settings (parameter) enable|disable|notconfigured

                                    if [[ $cword -eq 5 ]]; then
                                        options="localfirewallrules \
                                            localconsecrules \
                                            inboundusernotification \
                                            remotemanagement \
                                            unicastresponsetomulticast" 
                                    fi
                                    ;;

                                log*) # logging

                                    # TODO: more
                                    # allowedconnections  - Log allowed connections.
                                    # Values: enable|disable|notconfigured
                                    # droppedconnections  - Log dropped connections.
                                    # Values: enable|disable|notconfigured
                                    # filename            - Name and location of the firewall log.
                                    # Values: <string>|notconfigured
                                    # maxfilesize         - Maximum log file size in kilobytes.
                                    # Values: 1 - 32767|notconfigured

                                    if [[ $cword -eq 5 ]]; then
                                        options='allowedconnections droppedconnections filename
                                        maxfilesize'
                                    fi
                                    ;;

                            esac
                            ;;

                        glob*) # global

                            # TODO: statefulftp statefulpptp -> 'enable disable notconfigured'

                            # IPsec Parameters:

                            #       strongcrlcheck    - Configures how CRL checking is enforced.
                            #                           0: Disable CRL checking (default)
                            #                           1: Fail if cert is revoked
                            #                           2: Fail on any error
                            #                           notconfigured: Returns the value to its not
                            #                           configured state.
                            #       saidletimemin     - Configures the security association idle time in
                            #                           minutes.
                            #                         - Usage: 5-60|notconfigured (default=5)
                            #       defaultexemptions - Configures the default IPsec exemptions. Default is
                            #                           to exempt IPv6 neighbordiscovery protocol and
                            #                           DHCP from IPsec.
                            #                         - Usage: none|neighbordiscovery|icmp|dhcp|notconfigured
                            #       ipsecthroughnat   - Configures when security associations can be
                            #                           established with a computer behind a network
                            #                           address translator.
                            #                         - Usage: never|serverbehindnat|
                            #                                  serverandclientbehindnat|
                            #                                  notconfigured(default=never)
                            #       authzcomputergrp  - Configures the computers that are authorized to
                            #                           establish tunnel mode connections.
                            #                         - Usage: none|<SDDL string>|notconfigured
                            #       authzusergrp      - Configures the users that are authorized to establish
                            #                           tunnel mode connections.
                            #                         - Usage: none|<SDDL string>|notconfigured

                            # Main Mode Parameters:

                            #       mmkeylifetime     - Sets main mode key lifetime in minutes
                            #                           or sessions, or both.
                            #                         - Usage: <num>min,<num>sess
                            #                           minlifetime: <1> min,
                            #                           maxlifetime: <2880> min
                            #                           minsessions: <0> sessions,
                            #                           maxsessions: <2,147,483,647> sessions
                            #       mmsecmethods      - configures the main mode list of proposals
                            #                         - Usage:
                            #                           keyexch:enc-integrity,keyexch:enc-integrity[,...]|default
                            #                         - keyexch=dhgroup1|dhgroup2|dhgroup14|
                            #                           ecdhp256|ecdhp384
                            #                         - enc=3des|des|aes128|aes192|aes256
                            #                         - integrity=md5|sha1|sha256|sha384
                            #       mmforcedh         - configures the option to use DH to secure key exchange.
                            #                         - Usage:
                            #                           yes|no (default=no)

                            if [[ $cword -eq 4 ]]; then
                                options='statefulftp statefulpptp ipsec mainmode'
                            fi
                            ;;

                    esac
                    ;;

                sh*) # show
                    if [[ $cword -eq 3 ]]; then
                        options="allprofiles currentprofile domainprofile global \
                            privateprofile publicprofile store"
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    # TODO: more detail

                    case ${words[3]} in

                        a*) # allprofiles
                            if [[ $cword -eq 4 ]]; then
                                options='state firewallpolicy settings logging'
                            fi
                            ;;

                        c*) # currentprofile
                            if [[ $cword -eq 4 ]]; then
                                options='state firewallpolicy settings logging'
                            fi
                            ;;

                        d*) # domainprofile
                            if [[ $cword -eq 4 ]]; then
                                options='state firewallpolicy settings logging'
                            fi
                            ;;

                        g*) # global
                            if [[ $cword -eq 4 ]]; then
                                options="ipsec statefulftp statefulpptp \
                                    mainmode categories"
                            fi
                            ;;

                        pr*) # privateprofile
                            if [[ $cword -eq 4 ]]; then
                                options='state firewallpolicy settings logging'
                            fi
                            ;;

                        pu*) # publicprofile
                            if [[ $cword -eq 4 ]]; then
                                options='state firewallpolicy settings logging'
                            fi
                            ;;

                    esac
                    ;;

            esac
            ;;

        bri*) # bridge
            if [[ $cword -eq 2 ]]; then
                options='dump install set show uninstall'
                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                return
            fi

            case ${words[2]} in

                set)
                    if [[ $cword -eq 3 ]]; then
                        options='adapter'

                    elif [[ $cword -eq 4 ]]; then
                        IFS=$'\n'
                        options=$(_netsh_bridges)

                    elif [[ $cword -eq 5 ]]; then
                        options="forcecompatmode\=enable
                        forcecompatmode\=disable"

                    fi
                    ;;

                sh*) # show
                    if [[ $cword -eq 3 ]]; then
                        options='adapter'

                    elif [[ $cword -eq 4 ]]; then
                        IFS=$'\n'
                        options=$(_netsh_bridges)

                    fi
                    ;;

            esac
            ;;

        de*) # delete
            if [[ $cword -eq 2 ]]; then
                options='helper'

            elif [[ $cword -eq 3 ]]; then
                options=$(command ls *.dll 2> /dev/null)

            fi
            ;;

        dh*) # dhcpclient
            if [[ $cword -eq 2 ]]; then
                options='list trace'

            elif [[ $cword -eq 3 ]]; then
                options='enable disable dump'

            fi
            ;;

        dn*) # dnsclient
            if [[ $cword -eq 2 ]]; then
                options='add delete dump set show'
                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                return
            fi

            case ${words[2]} in

                a*) # add
                    if [[ $cword -eq 3 ]]; then
                        options='dnsservers'

                    elif [[ $cword -eq 4 ]]; then
                        IFS=$'\n'
                        options=$(_netsh_interfaces)

                    elif [[ $cword -eq 5 ]]; then
                        # TODO: recent ip addresses
                        options='address\='

                    elif [[ $cword -eq 6 ]]; then
                        options='index\='

                    elif [[ $cword -eq 7 ]]; then
                        options='validate\=yes validate\=no'

                    fi
                    ;;

                de*) # delete
                    if [[ $cword -eq 3 ]]; then
                        options='dnsservers'

                    elif [[ $cword -eq 4 ]]; then
                        IFS=$'\n'
                        options=$(_netsh_interfaces)

                    elif [[ $cword -eq 5 ]]; then
                        # TODO: test with multiple servers
                        IFS=$'\n'
                        options=$(netsh int ip show dnsservers ${words[4]//\\/} | sed -e 's/^[^0-9]\+//' -e '/^$/d')
                        options+=$'\n''all'

                    elif [[ $cword -eq 6 ]]; then
                        options='validate\=yes validate\=no'

                    fi
                    ;;

                set)
                    if [[ $cword -eq 3 ]]; then
                        options='dnsservers'

                    elif [[ $cword -eq 4 ]]; then
                        IFS=$'\n'
                        options=$(_netsh_interfaces)

                    elif [[ $cword -eq 5 ]]; then
                        options='dhcp static'

                    elif [[ $cword -eq 6 ]]; then
                        options='address\= none'

                    elif [[ $cword -eq 7 ]]; then
                        options='register\=none register\=primary register\=both'

                    elif [[ $cword -eq 8 ]]; then
                        options='validate\=yes validate\=no'

                    fi
                    ;;

                sh*) # show
                    if [[ $cword -eq 3 ]]; then
                        options='state'
                    fi
                    ;;

            esac
            ;;

        e*) # exec
            if [[ $cword -eq 2 ]]; then
                options=$(command ls 2> /dev/null)
            fi
            ;;

        f*) # firewall
            if [[ $cword -eq 2 ]]; then
                options='add delete dump set show'
            fi
            # NOTE: no further commands available on win7
            ;;

        ht*) # http
            if [[ $cword -eq 2 ]]; then
                options='add delete dump flush show'
                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                return
            fi

            # TODO: more detail

            case ${words[2]} in

                a*) # add
                    if [[ $cword -eq 3 ]]; then
                        options='cacheparam iplisten sslcert timeout urlacl'
                    fi
                    ;;

                de*) # delete
                    if [[ $cword -eq 3 ]]; then
                        options='cache iplisten sslcert timeout urlacl'
                    fi
                    ;;

                f*) # flush
                    if [[ $cword -eq 3 ]]; then
                        options='logbuffer'
                    fi
                    ;;

                s*) # show
                    if [[ $cword -eq 3 ]]; then
                        options="cacheparam cachestate iplisten servicestate sslcert \
                            timeout urlacl"
                    fi
                    ;;

            esac
            ;;

        in*) # interface

            if [[ $cword -eq 2 ]]; then
                options="6to4 dump httpstunnel ipv4 ipv6 isatap portproxy set \
                    show tcp teredo"
                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                return
            fi

            case ${words[2]} in

                6*) # 6to4
                    if [[ $cword -eq 3 ]]; then
                        options='dump set show'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi
                    # TODO: more
                    ;;

                h*) # httpstunnel

                    if [[ $cword -eq 3 ]]; then
                        options='add delete dump reset set show'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in

                        a*) # add
                            if [[ $cword -eq 4 ]]; then
                                options='interface'

                            elif [[ $cword -eq 5 ]]; then
                                options='client server'

                            elif [[ $cword -eq 6 ]]; then
                                options='url\='

                            elif [[ $cword -eq 7 ]]; then
                                options='enabled disabled default'

                            elif [[ $cword -eq 8 ]]; then
                                options='none certificates'

                            fi
                            ;;

                        de*) # delete
                            if [[ $cword -eq 4 ]]; then
                                options='interface'
                            fi
                            ;;

                        set)
                            if [[ $cword -eq 4 ]]; then
                                options='interface'

                            else
                                options=('state\=enabled' 'state\=disabled'
                                'state\=default' 'authmode\=none'
                                'authmode\=certificate' 'url\=')
                                options=$(_complement cmds[@] options[@])

                            fi
                            ;;

                        sh*) # show
                            if [[ $cword -eq 4 ]]; then
                                options='interfaces statistics'

                            elif [[ $cword -eq 5 ]]; then
                                options='store\=active store\=persistent'

                            fi
                            ;;

                    esac
                    ;;

                ip*) # ipv4
                    if [[ $cword -eq 3 ]]; then
                        options='add delete dump install reset set show uninstall'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in

                        add)

                            if [[ $cword -eq 4 ]]; then
								options="address dnsservers excludedportrange \
									neighbors route winsservers"
                                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                                return
                            fi

                            case ${words[4]} in

								a*) # address
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='address\='

                                    elif [[ $cword -eq 7 ]]; then
                                        options='mask\='

                                    elif [[ $cword -eq 8 ]]; then
                                        options='unicast anycast'

                                    elif [[ $cword -eq 9 ]]; then
                                        # TODO: suggest a decent gateway using the address and mask
                                        options='gateway\='

                                    elif [[ $cword -eq 10 ]]; then
                                        options='gwmetric\='

                                    elif [[ $cword -eq 11 ]]; then
                                        options='validlifetime\='

                                    elif [[ $cword -eq 12 ]]; then
                                        options='preferredlifetime\='

                                    elif [[ $cword -eq 13 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv4_subinterfaces)

                                    elif [[ $cword -eq 14 ]]; then
                                        options='active persistent'

                                    elif [[ $cword -eq 15 ]]; then
                                        options='skipassource\=true skipassource\=false'

                                    fi
									;;

								d*) # dnsservers
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='address\='

                                    elif [[ $cword -eq 7 ]]; then
                                        options='index\='

                                    elif [[ $cword -eq 8 ]]; then
                                        options='validate\=yes validate\=no'

                                    fi
									;;

								e*) # excludedportrange
                                    if [[ $cword -eq 5 ]]; then
                                        options='udp tcp'

                                    elif [[ $cword -eq 6 ]]; then
                                        options='startport\='

                                    elif [[ $cword -eq 7 ]]; then
                                        options='numberofports\='

                                    elif [[ $cword -eq 8 ]]; then
                                        options='active persistent'

                                    fi
									;;

								n*) # neighbors
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='address\='

                                    elif [[ $cword -eq 7 ]]; then
                                        options='neighbor\='

                                    elif [[ $cword -eq 8 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv4_subinterfaces)

                                    elif [[ $cword -eq 9 ]]; then
                                        options='active persistent'

                                    fi
									;;

								r*) # route
                                    if [[ $cword -eq 5 ]]; then
                                        options='prefix\='

                                    elif [[ $cword -eq 6 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 7 ]]; then
                                        options='nexthop\='

                                    elif [[ $cword -eq 8 ]]; then
                                        options='siteprefixlength\='

                                    elif [[ $cword -eq 9 ]]; then
                                        options='metric\='

                                    elif [[ $cword -eq 10 ]]; then
                                        options='publish\=no publish\=age publish\=yes'

                                    elif [[ $cword -eq 11 ]]; then
                                        options='validlifetime\='

                                    elif [[ $cword -eq 12 ]]; then
                                        options='preferredlifetime\='

                                    elif [[ $cword -eq 13 ]]; then
                                        options='store\=active store\=persistent'

                                    fi
									;;

								w*) # winsservers
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='address\='

                                    elif [[ $cword -eq 7 ]]; then
                                        options='index\='

                                    fi
									;;

                            esac
                            ;;

                        de*) # delete
                            if [[ $cword -eq 4 ]]; then
                                options="address arpcache destinationcache \
                                    dnsservers excludedportrange neighbors \
                                    route winsservers"
                                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                                return
                            fi

                            case ${words[4]} in

                                ad*) # address
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interface_addresses_ipv4 ${words[5]//\\/})

                                    elif [[ $cword -eq 7 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interface_gateway_ipv4 ${words[5]//\\/})
                                        options+=$'\n''gateway\=all'

                                    elif [[ $cword -eq 8 ]]; then
                                        options='store\=active store\=persistent'

                                    fi
                                    ;;

                                ar*) # arpcache
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv4_neighbors ${words[5]})

                                    elif [[ $cword -eq 7 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv4_subinterfaces)

                                    elif [[ $cword -eq 8 ]]; then
                                        options='store\=active store\=persistent'

                                    fi
                                    ;;

                                de*) # destinationcache
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        IFS=$'\n'
                                        options=$(netsh int ip show destinationcache ${words[5]//\\/} | sed -e '/[A-Z-]/d' -e 's/^[^ ]\+ //' -e '/^$/d' -e 's/ .*//')

                                    fi
                                    ;;

                                dn*) # dnsservers
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        IFS=$'\n'
                                        options=$(netsh int ip show dnsservers ${words[5]//\\/} | sed -e 's/^[^0-9]\+//' -e '/^$/d')
                                        options+=$'\n''all'

                                    elif [[ $cword -eq 7 ]]; then
                                        options='validate\=yes validate\=no'

                                    fi
                                    ;;

                                e*) # excludedportrange
                                    if [[ $cword -eq 5 ]]; then
                                        options='tcp udp'

                                    elif [[ $cword -eq 6 ]]; then
                                        options='startport\='

                                    elif [[ $cword -eq 7 ]]; then
                                        options='numberofports\='

                                    elif [[ $cword -eq 8 ]]; then
                                        options='store\=active store\=persistent'

                                    fi
                                    ;;

                                n*) # neighbors
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv4_neighbors ${words[5]})

                                    elif [[ $cword -eq 7 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv4_subinterfaces)

                                    elif [[ $cword -eq 8 ]]; then
                                        options='store\=active store\=persistent'

                                    fi
                                    ;;

                                r*) # route
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(netsh int ip show route | sed -e 's/^\([^ ]\+[ ]\+\)\{3\}//' -e 's/[ ]\+/ /g' -e '/^[0-9]/!d' -e 's/[A-z].*//')
                                        options=$(printf '%s\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d")

                                    elif [[ $cword -eq 6 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 7 ]]; then
                                        # TODO: suggest existing next hop addresses
                                        options='nexthop\='

                                    elif [[ $cword -eq 8 ]]; then
                                        options='store\=active store\=persistent'

                                    fi
                                    ;;

                                w*) # winsservers
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        IFS=$'\n'
                                        options=$(netsh int ip show winsservers ${words[5]//\\/} | sed -e 's/^[^0-9]\+//' -e '/^$/d')
                                        options+=$'\n''all'

                                    fi
                                    ;;

                            esac
                            ;;

                        set)

                            if [[ $cword -eq 4 ]]; then
                                options="address compartment dnsservers \
                                    dynamicportrange global interface  \
                                    neighbors route subinterface winsservers"
                                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                                return
                            fi

                            case ${words[4]} in

                                a*) # address
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='dhcp static'

                                    elif [[ $cword -eq 7 ]]; then
                                        options='address\='

                                    elif [[ $cword -eq 8 ]]; then
                                        options='mask\='

                                    elif [[ $cword -eq 9 ]]; then
                                        options='gateway\=none gateway\='

                                    elif [[ $cword -eq 10 ]]; then
                                        options='gwmetric\='

                                    elif [[ $cword -eq 11 ]]; then
                                        options='unicast anycast'

                                    elif [[ $cword -eq 12 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv4_subinterfaces)

                                    elif [[ $cword -eq 13 ]]; then
                                        options='active persistent'

                                    fi
                                    ;;

                                c*) # compartment
                                    if [[ $cword -eq 5 ]]; then
                                        options='compartment\='

                                    elif [[ $cword -eq 6 ]]; then
                                        options='defaultcurhoplimit\='

                                    elif [[ $cword -eq 7 ]]; then
                                        options='active persistent'

                                    fi
                                    ;;

                                dn*) # dnsservers
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='dhcp static'

                                    elif [[ $cword -eq 7 ]]; then
                                        options='address\= address\=none'

                                    elif [[ $cword -eq 8 ]]; then
                                        options='register\=none register\=primary register\=both'

                                    elif [[ $cword -eq 9 ]]; then
                                        options='validate\=yes validate\=no'

                                    fi
                                    ;;

                                dy*) # dynamicportrange
                                    if [[ $cword -eq 5 ]]; then
                                        options='tcp udp'

                                    elif [[ $cword -eq 6 ]]; then
                                        options='startport\='

                                    elif [[ $cword -eq 7 ]]; then
                                        options='numberofports\='

                                    elif [[ $cword -eq 8 ]]; then
                                        options='store\=active store\=persistent'

                                    fi
                                    ;;

                                gl*) # global
                                    options=('defaultcurhoplimit\='
                                    'neighborcachelimit\=' 'routecachelimit\='
                                    'icmpredirects\=enabled'
                                    'icmpredirects\=disabled'
                                    'sourceroutingbehavior\=drop'
                                    'sourceroutingbehavior\=forward'
                                    'sourceroutingbehavior\=dontforward'
                                    'taskoffload\=enabled'
                                    'taskoffload\=disabled'
                                    'dhcpmediasense\=enabled'
                                    'dhcpmediasense\=disabled'
                                    'mediasenseeventlog\=disabled'
                                    'mediasenseeventlog\=enabled'
                                    'mldlevel\=all' 'mldlevel\=sendonly'
                                    'mldlevel\=none' 'mldversion\=version1'
                                    'mldversion\=version2'
                                    'mldversion\=version3'
                                    'multicastforwarding\=disabled'
                                    'multicastforwarding\=enabled'
                                    'groupforwardedfragments\=disabled'
                                    'groupforwardedfragments\=enabled'
                                    'randomizeidentifiers\=disabled'
                                    'randomizeidentifiers\=enabled'
                                    'store\=active' 'store\=persistent'
                                    'addressmaskreply\=disabled'
                                    'addressmaskreply\=enabled' 'minmtu\=')
                                    options=$(_complement cmds[@] options[@])
                                    ;;

                                i*) # interface
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    else
                                        options=('forwarding\=disabled'
                                        'forwarding\=enabled'
                                        'advertise\=disabled'
                                        'advertise\=enabled' 'mtu\=' 'siteid\='
                                        'metric\=' 'metric\=automatic'
                                        'firewall\=disabled'
                                        'firewall\=enabled'
                                        'siteprefixlength\=' 'nud\=disabled'
                                        'nud\=enabled' 'basereachabletime\='
                                        'retransmittime\=' 'dadtransmits\='
                                        'routerdiscovery\=dhcp'
                                        'routerdiscovery\=disabled'
                                        'routerdiscovery\=enabled'
                                        'managedaddress\=enabled'
                                        'managedaddress\=disabled'
                                        'otherstateful\=disabled'
                                        'otherstateful\=enabled'
                                        'weakhostsend\=enabled'
                                        'weakhostsend\=disabled'
                                        'weakhostreceive\=enabled'
                                        'weakhostreceive\=disabled'
                                        'ignoredefaultroutes\=disabled'
                                        'ignoredefaultroutes\=enabled'
                                        'advertisedrouterlifetime\='
                                        'currenthoplimit\='
                                        'advertisedefaultroute\=disabled'
                                        'advertisedefaultroute\=enabled'
                                        'currenthoplimit\=' 'store\=active'
                                        'store\=persistent'
                                        'forcearpndwolpattern\=enabled'
                                        'forcearpndwolpattern\=disabled'
                                        'enabledirectedmacwolpattern\=disabled'
                                        'enabledirectedmacwolpattern\=enabled'
                                        'ecncapability\=ecndisabled'
                                        'ecncapability\=ect1'
                                        'ecncapability\=ect0'
                                        'ecncapability\=application')
                                        options=$(_complement cmds[@] options[@])
                                    fi
                                    ;;

                                n*) # neighbors
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv4_neighbors ${words[5]})

                                    elif [[ $cword -eq 7 ]]; then
                                        options='store\=active store\=persistent '

                                    fi
                                    ;;

                                r*) # route
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv4_routes)

                                    elif [[ $cword -eq 6 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 7 ]]; then
                                        options='nexthop\='

                                    elif [[ $cword -eq 8 ]]; then
                                        options='siteprefixlength\='

                                    elif [[ $cword -eq 9 ]]; then
                                        options='metric\='

                                    elif [[ $cword -eq 10 ]]; then
                                        options='publish\=no publish\=age publish\=yes'

                                    elif [[ $cword -eq 11 ]]; then
                                        options='validlifetime\= infinite'

                                    elif [[ $cword -eq 12 ]]; then
                                        options='preferredlifetime\= infinite'

                                    elif [[ $cword -eq 13 ]]; then
                                        options='store\=persistent store\=active'

                                    fi
                                    ;;

                                s*) # subinterface
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='mtu\='

                                    elif [[ $cword -eq 7 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv4_subinterfaces)

                                    elif [[ $cword -eq 8 ]]; then
                                        options='store\=active store\=persistent'

                                    fi
                                    ;;

                                w*) # winsservers
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='dhcp static'

                                    elif [[ $cword -eq 7 ]]; then
                                        options='address\=none address\='

                                    fi
                                    ;;

                            esac
                            ;;

                        sh*) # show

                            if [[ $cword -eq 4 ]]; then
                                options="addresses compartments config \
                                    destinationcache dnsservers dynamicportrange \
                                    excludedportrange global icmpstats interfaces \
                                    ipaddresses ipnettomedia ipstats joins neighbors \
                                    offload route subinterfaces tcpconnections \
                                    tcpstats udpconnections udpstats winsservers"
                                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                                return
                            fi

                            case ${words[4]} in

                                # winsservers offload addresses config dnsservers
                                w*|o*|a*|con*|dn*)
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)
                                    fi
                                    ;;

                                com*) # compartments
                                    if [[ $cword -eq 5 ]]; then
                                        options='compartment\='

                                    elif [[ $cword -eq 6 ]]; then
                                        options='normal verbose'

                                    elif [[ $cword -eq 7 ]]; then
                                        options='active persistent'

                                    fi
                                    ;;

                                de*) # destinationcache
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='address\='

                                    elif [[ $cword -eq 7 ]]; then
                                        options='normal verbose'

                                    fi
                                    ;;

                                # excludedportrange dynamicportrange
                                ex*|dy*)
                                    if [[ $cword -eq 5 ]]; then
                                        options='tcp udp'

                                    elif [[ $cword -eq 6 ]]; then
                                        options='active persistent'

                                    fi
                                    ;;

                                g*) # global
                                    if [[ $cword -eq 5 ]]; then
                                        options='active persistent'
                                    fi
                                    ;;

                                # udpstats tcpstats ipnettomedia ipstats icmpstats
                                udps*|tcps*|ipn*|ips*|ic*)
                                    if [[ $cword -eq 5 ]]; then
                                        options='rr\='
                                    fi
                                    ;;

                                in*) # interfaces
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='rr\='

                                    elif [[ $cword -eq 7 ]]; then
                                        options='normal verbose'

                                    elif [[ $cword -eq 8 ]]; then
                                        options='active persistent'

                                    fi
                                    ;;

                                ipa*) # ipaddresses
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='normal verbose'

                                    elif [[ $cword -eq 7 ]]; then
                                        options='active persistent'

                                    fi
                                    ;;

                                j*) # joins
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='normal verbose'

                                    fi
                                    ;;

                                ne*) # neighbors
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        # TODO: list neighbor addresses
                                        options='address\='

                                    elif [[ $cword -eq 7 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv4_subinterfaces)

                                    elif [[ $cword -eq 8 ]]; then
                                        options='normal verbose'

                                    elif [[ $cword -eq 9 ]]; then
                                        options='active persistent'

                                    fi
                                    ;;

                                r*) # route
                                    if [[ $cword -eq 5 ]]; then
                                        options='normal verbose'

                                    elif [[ $cword -eq 6 ]]; then
                                        options='active persistent'

                                    fi
                                    ;;

                                s*) # subinterfaces
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_interfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv4_subinterfaces)

                                    elif [[ $cword -eq 7 ]]; then
                                        options='normal verbose'

                                    elif [[ $cword -eq 8 ]]; then
                                        options='active persistent'

                                    fi
                                    ;;

                                tcpc*) # tcpconnections
                                    if [[ $cword -eq 5 ]]; then
                                        # TODO: list local ip addresses
                                        options='localaddresses\='

                                    elif [[ $cword -eq 6 ]]; then
                                        options='localport\='

                                    elif [[ $cword -eq 7 ]]; then
                                        # TODO: list remote addresses
                                        options='remoteaddress\='

                                    elif [[ $cword -eq 8 ]]; then
                                        options='remoteport\='

                                    elif [[ $cword -eq 9 ]]; then
                                        options='rr\='

                                    fi
                                    ;;

                                udpc*) # udpconnections
                                    if [[ $cword -eq 5 ]]; then
                                        # TODO: list local ip addresses
                                        options='localaddresses\='

                                    elif [[ $cword -eq 6 ]]; then
                                        options='localport\='

                                    elif [[ $cword -eq 7 ]]; then
                                        options='rr\='

                                    fi
                                    ;;

                            esac
                            ;;

                    esac
                    ;;

                ipv6)
                    if [[ $cword -eq 3 ]]; then
                        options='6to4 add delete dump isatap reset set show'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in

                        6*) # 6to4
                            if [[ $cword -eq 4 ]]; then
                                options='dump set show'
                                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                                return
                            fi

                            case ${words[4]} in

                                set)
                                    if [[ $cword -eq 5 ]]; then
                                        options='interface relay routing state'
                                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                                        return
                                    fi

                                    case ${words[5]} in

                                        # TODO: may want to prepend the property name onto some of the options below to be more usable and readable

                                        i*) # interface
                                            if [[ $cword -eq 6 ]]; then
                                                options='name\='

                                            elif [[ $cword -eq 7 ]]; then
                                                options='enabled disabled default'

                                            fi
                                            ;;

                                        re*) # relay
                                            if [[ $cword -eq 6 ]]; then
                                                options='default name\='

                                            elif [[ $cword -eq 7 ]]; then
                                                options='enabled disabled automatic default'

                                            elif [[ $cword -eq 8 ]]; then
                                                options='interval\='

                                            fi
                                            ;;

                                        ro*) # routing
                                            if [[ $cword -eq 6 ]]; then
                                                options='enabled disabled automatic default'

                                            elif [[ $cword -eq 7 ]]; then
                                                options='enabled disabled default'

                                            fi
                                            ;;

                                        s*) # state
                                            if [[ $cword -eq 6 ]]; then
                                                options='enabled disabled default'

                                            elif [[ $cword -eq 7 ]]; then
                                                options='enabled disabled default'

                                            fi
                                            ;;

                                    esac
                                    ;;

                                sh*) # show
                                    if [[ $cword -eq 5 ]]; then
                                        options='interface relay routing state'
                                    fi
                                    ;;

                            esac
                            ;; 

                        a*) # add
                            if [[ $cword -eq 4 ]]; then
                                options='address dnsservers excludedportrange
                                neighbors potentialrouter prefixpolicy route
                                v6v4tunnel'
                                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                                return
                            fi

                            case ${words[4]} in

                                a*) # address
                                    if [[ $cword -eq 5 ]]; then
                                        IFS=$'\n'
                                        options=$(_netsh_ipv6_subinterfaces)

                                    elif [[ $cword -eq 6 ]]; then
                                        options='address\='

                                    elif [[ $cword -eq 7 ]]; then
                                        options='unicast anycast'

                                    elif [[ $cword -eq 8 ]]; then
                                        options='validlifetime\= validlifetime\=infinite'

                                    elif [[ $cword -eq 9 ]]; then
                                        options='preferredlifetime\= preferredlifetime\=infinite'

                                    elif [[ $cword -eq 10 ]]; then
                                        options='store\=active store\=persistent'

                                    elif [[ $cword -eq 11 ]]; then
                                        options='skipassource\=true skipassource\=false'

                                    fi
                                    ;;

                                d*) # dnsservers
                                    # TODO: implement
                                    if [[ $cword -eq 5 ]]; then
                                        options=''
                                    fi
                                    ;;

                                e*) # excludedportrange
                                    # TODO: implement
                                    if [[ $cword -eq 5 ]]; then
                                        options=''
                                    fi
                                    ;;

                                n*) # neighbors
                                    # TODO: implement
                                    if [[ $cword -eq 5 ]]; then
                                        options=''
                                    fi
                                    ;;

                                po*) # potentialrouter
                                    # TODO: implement
                                    if [[ $cword -eq 5 ]]; then
                                        options=''
                                    fi
                                    ;;

                                pr*) # prefixpolicy
                                    # TODO: implement
                                    if [[ $cword -eq 5 ]]; then
                                        options=''
                                    fi
                                    ;;

                                r*) # route
                                    # TODO: implement
                                    if [[ $cword -eq 5 ]]; then
                                        options=''
                                    fi
                                    ;;

                                v*) # v6v4tunnel
                                    # TODO: implement
                                    if [[ $cword -eq 5 ]]; then
                                        options=''
                                    fi
                                    ;;

                            esac
                            ;;

                        de*) # delete
                            # TODO: implement
                            ;;

                        du*) # dump
                            # TODO: implement
                            ;;

                        i*) # isatap
                            # TODO: implement
                            ;;

                        re*) # reset
                            # TODO: implement
                            ;;

                        set)
                            # TODO: implement
                            ;;

                        sh*) # show
                            # TODO: implement
                            ;;

                    esac
                    ;;

                is*) # isatap

                    if [[ $cword -eq 3 ]]; then
                        options='dump set show'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in

                        sh*) # show
                            if [[ $cword -eq 4 ]]; then
                                options='router state'
                            fi
                            ;;

                        set)
                            if [[ $cword -eq 4 ]]; then
                                # TODO: set router name= state=enabled|disabled|default interval=
                                # TODO: set state enabled|disabled|default
                                options='router state'
                            fi
                            ;;
                    esac
                    ;;

                p*) # portproxy
                    # TODO: more detail
                    if [[ $cword -eq 3 ]]; then
                        options='add delete dump reset set show'
                    fi
                    ;;

                set)
                    if [[ $cword -eq 3 ]]; then
                        options='interface'

                    elif [[ $cword -eq 4 ]]; then
                        IFS=$'\n'
                        options=$(_netsh_interfaces)

                    elif [[ $cword -eq 5 ]]; then
                        options='enabled disabled'

                    elif [[ $cword -eq 6 ]]; then
                        options='connected disconnected'

                    elif [[ $cword -eq 7 ]]; then
                        options='newname\='

                    fi
                    ;;

                sh*) # show
                    if [[ $cword -eq 3 ]]; then
                        options='interface'

                    elif [[ $cword -eq 4 ]]; then
                        IFS=$'\n'
                        options=$(_netsh_interfaces)

                    fi
                    ;;

                tcp)
                    # TODO: more detail
                    if [[ $cword -eq 3 ]]; then
                        options='add delete dump reset set show'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in
                        a*) # add
                            if [[ $cword -eq 4 ]]; then
                                options="chimneyapplication chimneyport \
                                    supplementalport supplementalsubnet" 
                            fi
                            ;;

                        de*) # delete
                            if [[ $cword -eq 4 ]]; then
                                options="chimneyapplication chimneyport \
                                    supplementalport supplementalsubnet" 
                            fi
                            ;;

                        r*) # reset
                            ;;

                        set)
                            if [[ $cword -eq 4 ]]; then
                                options="global heuristics security \
                                    supplimental"
                            fi
                            ;;

                        sh*) # show
                            if [[ $cword -eq 4 ]]; then
                                options="chimneyapplications chimneyports \
                                    chimneystats global heuristics \
                                    netdmastats rscstats security \
                                    supplemental supplementalports \
                                    supplementalsubnets"
                            fi
                            ;;

                    esac
                    ;;

                te*) # teredo
                    # TODO: more detail
                    if [[ $cword -eq 3 ]]; then
                        options='dump set show'
                    fi
                    ;;

            esac
            ;;

        ip*) # ipsec
            if [[ $cword -eq 2 ]]; then
                options='dump dynamic static'
            fi
            # TODO: more detail
            ;;

        l*) # lan
            if [[ $cword -eq 2 ]]; then
                options='add delete dump export reconnect set show'
            fi
            # TODO: more detail
            ;;

        nam*) # namespace
            if [[ $cword -eq 2 ]]; then
                options='dump show'
            fi
            ;;

        nap)
            if [[ $cword -eq 2 ]]; then
                options='client dump hra reset show'
            fi
            # TODO: more detail
            ;;

        ne*) # netio
            if [[ $cword -eq 2 ]]; then
                options='add delete dump show'
            fi
            # TODO: more detail
            ;;

        p*) # p2p
            if [[ $cword -eq 2 ]]; then
                options='dump group idmgr pnrp'
            fi
            # TODO: more detail
            ;;

        ra*) # ras
            if [[ $cword -eq 2 ]]; then
                options='aaaa add delete diagnostics dump ip ipv6 set show'
            fi
            # TODO: more detail
            ;;

        rp*) # rpc
            if [[ $cword -eq 2 ]]; then
                options='add delete dump filter reset show'
                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                return
            fi

            case ${words[2]} in

                de*) # delete
                    # TODO: implement
                    ;;

                f*) # filter
                    # TODO: implement
                    ;;

            esac
            ;;

        se*) # set
            if [[ $cword -eq 2 ]]; then
                options='machine'

            elif [[ $cword -eq 3 ]]; then
                options='name\='

            elif [[ $cword -eq 4 ]]; then
                options='user=\'

            elif [[ $cword -eq 5 ]]; then
                options='pwd=\'

            fi
            ;;

        sh*) # show
            if [[ $cword -eq 2 ]]; then
                options='alias helper'
            fi
            ;;

        wf*) # wfp
            if [[ $cword -eq 2 ]]; then
                options='capture dump set show'
            fi
            # TODO: more detail
            ;;

        winh*) # winhttp
            if [[ $cword -eq 2 ]]; then
                options='dump import reset set show'
                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                return
            fi

            case ${words[2]} in

                i*) # import
                    if [[ $cword -eq 3 ]]; then
                        options='proxy'

                    elif [[ $cword -eq 4 ]]; then
                        options='ie'

                    fi
                    ;;

                r*) # reset
                    if [[ $cword -eq 3 ]]; then
                        options='proxy tracing'
                    fi
                    ;;

                set)
                    if [[ $cword -eq 3 ]]; then
                        options='proxy tracing'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in

                        p*) # proxy
                            if [[ $cword -eq 4 ]]; then
                                options='proxy-server\='

                            elif [[ $cword -eq 5 ]]; then
                                options='bypass-list\='

                            fi
                            ;;

                        t*) # tracing
                            if [[ $cword -eq 4 ]]; then
                                options='file debugger both'

                            elif [[ $cword -eq 5 ]]; then
                                options='trace-file-prefix\='

                            elif [[ $cword -eq 6 ]]; then
                                options='default verbose'

                            elif [[ $cword -eq 7 ]]; then
                                options='ansi hex'

                            elif [[ $cword -eq 8 ]]; then
                                options='max-trace-file-size\='

                            elif [[ $cword -eq 9 ]]; then
                                options='enabled disabled'

                            fi
                            ;;

                    esac
                    ;;

                sh*) # show
                    if [[ $cword -eq 3 ]]; then
                        options='proxy tracing'
                    fi
                    ;;

            esac
            ;;

        wins*) # winsock
            if [[ $cword -eq 2 ]]; then
                options='audit dump remove reset set show'
                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                return
            fi

            case ${words[2]} in

                a*) # audit
                    if [[ $cword -eq 3 ]]; then
                        options='trail'
                    fi
                    ;;

                rem*) # remove
                    if [[ $cword -eq 3 ]]; then
                        options='provider'
                    fi
                    ;;

                set)
                    if [[ $cword -eq 3 ]]; then
                        options='autotuning'

                    elif [[ $cword -eq 4 ]]; then
                        options='on off'

                    fi
                    ;;

                sh*) # show
                    if [[ $cword -eq 3 ]]; then
                        options='autotuning catalog'
                    fi
                    ;;

            esac
            ;;

        wl*) # wlan

            if [[ $cword -eq 2 ]]; then
                options="add connect delete disconnect dump export refresh \
                    reportissues set show start stop"
                COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                return
            fi

            case ${words[2]} in

                a*) # add
                    if [[ $cword -eq 3 ]]; then
                        options='filter profile'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in

                        f*) # filter
                            if [[ $cword -eq 4 ]]; then
                                options='allow block denyall'

                            elif [[ $cword -eq 5 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_profiles)

                            elif [[ $cword -eq 6 ]]; then
                                options='infrastructure adhoc'

                            fi
                            ;;

                        p*) # profile
                            if [[ $cword -eq 4 ]]; then
                                options='filename\='

                            elif [[ $cword -eq 5 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_interfaces)

                            elif [[ $cword -eq 6 ]]; then
                                options='all current'

                            fi
                            ;;

                    esac
                    ;;

                c*) # connect
                    if [[ $cword -eq 3 ]]; then
                        IFS=$'\n'
                        options=$(_netsh_wlan_profiles)

                    elif [[ $cword -eq 4 ]]; then
                        IFS=$'\n'
                        options=$(_netsh_wlan_profiles)

                    elif [[ $cword -eq 5 ]]; then
                        IFS=$'\n'
                        options=$(_netsh_wlan_interfaces)

                    fi
                    ;;

                de*) # delete
                    if [[ $cword -eq 3 ]]; then
                        options='filter profile'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in

                        f*) # filter
                            if [[ $cword -eq 4 ]]; then
                                options='allow block denyall'

                            elif [[ $cword -eq 5 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_profiles)

                            elif [[ $cword -eq 6 ]]; then
                                options='infrastructure adhoc'

                            fi
                            ;;

                        p*) # profile
                            if [[ $cword -eq 4 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_profiles)

                            elif [[ $cword -eq 5 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_interfaces)

                            fi
                            ;;

                    esac
                    ;;

                di*) # disconnect
                    if [[ $cword -eq 3 ]]; then
                        IFS=$'\n'
                        options=$(_netsh_wlan_interfaces)
                    fi
                    ;;

                e*) # export
                    if [[ $cword -eq 3 ]]; then
                        options='hostednetworkprofile profile'
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in

                        p*) # profile
                            if [[ $cword -eq 4 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_profiles)

                            elif [[ $cword -eq 5 ]]; then
                                options='folder\='

                            elif [[ $cword -eq 6 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_interfaces)

                            elif [[ $cword -eq 7 ]]; then
                                options='key\=clear'

                            fi
                            ;;

                    esac
                    ;;

                ref*) # refresh
                    if [[ $cword -eq 3 ]]; then
                        options='hostednetwork'
                    fi
                    ;;

                set)
                    if [[ $cword -eq 3 ]]; then
                        options="allowexplicitcreds autoconfig blockednetworks \
                            blockperiod createalluserprofile hostednetwork \
                            profileorder profileparameter profiletype tracing"
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in

                        al*) # allowexplicitcreds
                            if [[ $cword -eq 4 ]]; then
                                options='yes no'
                            fi
                            ;;

                        au*) # autoconfig
                            if [[ $cword -eq 4 ]]; then
                                options='yes no'

                            elif [[ $cword -eq 5 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_interfaces)

                            fi
                            ;;

                        blocke*) # blockednetworks
                            if [[ $cword -eq 4 ]]; then
                                options='show hide'
                            fi
                            ;;

                        blockp*) # blockperiod
                            if [[ $cword -eq 4 ]]; then
                                options='value\='
                            fi
                            ;;

                        c*) # createalluserprofile
                            if [[ $cword -eq 4 ]]; then
                                options='yes no'
                            fi
                            ;;

                        h*) # hostednetwork
                            if [[ $cword -eq 4 ]]; then
                                options='allow disallow'

                            elif [[ $cword -eq 5 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_profiles)

                            elif [[ $cword -eq 6 ]]; then
                                options='key\='

                            elif [[ $cword -eq 7 ]]; then
                                options='persistent temporary'

                            fi
                            ;;

                        profileo*) # profileorder
                            if [[ $cword -eq 4 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_profiles)

                            elif [[ $cword -eq 5 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_interfaces)

                            elif [[ $cword -eq 6 ]]; then
                                options='priority\='

                            fi
                            ;;

                        profilep*) # profileparameter
                            if [[ $cword -eq 4 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_profiles)

                            elif [[ $cword -eq 5 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_interfaces)

                            else
                                # TODO: list options for ssidname
                                options=('ssidname\=' 'connectiontype\=ess'
                                'connectiontype\=ibss' 'autoswitch\=yes'
                                'autoswitch\=no' 'connectionmode\=auto'
                                'connectionmode\=manual'
                                'nonbroadcast\=yes' 'nonbroadcast\=no'
                                'randomization\=yes' 'randomization\=no'
                                'randomization\=daily'
                                'authentication\=open'
                                'authentication\=shared'
                                'authentication\=wpa'
                                'authentication\=wpa2'
                                'authentication\=wpapsk'
                                'authentication\=wpa2psk'
                                'encryption\=none' 'encryption\=wep'
                                'encryption\=tkip' 'encryption\=aes'
                                'keytype\=networkkey' 'keytype\=passphrase'
                                'keyindex\=' 'keymaterial\='
                                'pmkcachemode\=yes' 'pmkcachemode\=no'
                                'pmkcachesize\=' 'pmkcachettl\='
                                'preauthmode\=yes' 'preauthmode\=no'
                                'preauththrottle\=' 'fips\=yes' 'fips\=no'
                                'useonex\=yes' 'useonex\=no'
                                'authmode\=machineoruser'
                                'authmode\=machineonly'
                                'authmode\=useronly' 'authmode\=guest'
                                'ssomode\=prelogon' 'ssomode\=postlogon'
                                'ssomode\=none' 'maxdelay\='
                                'allowdialog\=yes' 'allowdialog\=no'
                                'uservlan\=yes' 'uservlan\=no'
                                'heldperiod\=' 'authperiod\='
                                'startperiod\=' 'maxstart\='
                                'maxauthfailures\=' 'cacheuserdata\=yes'
                                'cacheuserdata\=no' 'cost\=default'
                                'cost\=unrestricted' 'cost\=fixed'
                                'cost\=variable')
                                options=$(_complement cmds[@] options[@])

                            fi
                            ;;

                        profilet*) # profiletype
                            if [[ $cword -eq 4 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_profiles)

                            elif [[ $cword -eq 5 ]]; then
                                options='all current'

                            elif [[ $cword -eq 6 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_interfaces)

                            fi
                            ;;

                        t*) # tracing
                            if [[ $cword -eq 4 ]]; then
                                options='yes no persistent'
                            fi
                            ;;

                    esac
                    ;;

                sh*) # show
                    if [[ $cword -eq 3 ]]; then
                        options="all allowexplicitcreds autoconfig \
                            blockednetworks createalluserprofile drivers filters \
                            hostednetwork interfaces networks  \
                            onlyUseGPProfilesforAllowedNetworks profiles settings \
                            tracing"
                        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
                        return
                    fi

                    case ${words[3]} in

                        f*) # filters
                            if [[ $cword -eq 4 ]]; then
                                options='allow block'
                            fi
                            ;;

                        h*) # hostednetwork
                            if [[ $cword -eq 4 ]]; then
                                options='security'
                            fi
                            ;;

                        n*) # networks
                            if [[ $cword -eq 4 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_interfaces)

                            elif [[ $cword -eq 5 ]]; then
                                options='ssid bssid'

                            fi
                            ;;

                        p*) # profiles
                            if [[ $cword -eq 4 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_profiles)

                            elif [[ $cword -eq 5 ]]; then
                                IFS=$'\n'
                                options=$(_netsh_wlan_interfaces)

                            elif [[ $cword -eq 6 ]]; then
                                options='key\=clear'

                            fi
                            ;;

                    esac
                    ;;

                sta*) # start
                    if [[ $cword -eq 3 ]]; then
                        options='hostednetwork'
                    fi
                    ;;

                sto*) # stop
                    if [[ $cword -eq 3 ]]; then
                        options='hostednetwork'
                    fi
                    ;;

            esac
            ;;

    esac

    if [[ "$prev" != "?" && -z "$IFS" ]]; then
        options="$options"
    fi

    COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
    [[ $COMPREPLY == *= ]] && compopt -o nospace
}

complete -o default -F _netsh netsh netsh.exe


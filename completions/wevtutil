#!/usr/bin/env sh

_wevtutil_publishers()
{
    local options IFS
    IFS=$'\n'
    options=$(wevtutil ep | sed -e 's/\r//')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\&/g' -e "/''/d"
}

_wevtutil_logs()
{
    local options IFS
    IFS=$'\n'
    options=$(wevtutil el | sed -e 's/\r//')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\&/g' -e "/''/d"
}

_wevtutil_computer_names()
{
    local IFS options
    IFS=$'\n'
    local options=$(net view /all 2> /dev/null | sed -e '/^\\\\/!d' -e 's/ .*//' -e 's/^\\\\//')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\&/g' -e "/''/d"
}

_wevtutil()
{
    local cur prev words cword options IFS
    _init_completion

    cur=$(printf '%q' "${cur,,}")

    if [[ $prev == '/?' ]]; then
        return
    fi

    if [[ $cword -eq 1 ]]; then
        options='enum-logs get-log set-log enum-publishers
        get-publisher install-manifest uninstall-manifest query-events
        get-log-info export-log archive-log clear-log el gl sl ep gp im
        um qe gli epl al cl /?'
        COMPREPLY=( $( compgen -W '$options' -- $cur ) )
        return
    fi

    # TODO: computername and username completion
    options=('/remote\:' '/username\:' '/password\:'
    '/authentication\:default' '/authentication\:negotiate'
    '/authentication\:kerberos' '/authentication\:ntlm' '/unicode\:true'
    '/unicode\:false')

    local cmds=( ${words[@]::cword} ) 

    case ${words[1]} in

        al|archive-log)
            if [[ $cword -eq 2 ]]; then
                return

            else
                options+=( '/locale\:' )
                options=$(_complement cmds[@] options[@])

            fi
            ;;

        cl|clear-log)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_wevtutil_logs)

            else
                options+=( '/backup\:' )
                options=$(_complement cmds[@] options[@])

            fi
            ;;

        um|uninstall-manifest|el|enum-logs|ep|enum-publishers)
            options=$(_complement cmds[@] options[@])
            ;;

        epl|export-log)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_wevtutil_logs)

            elif [[ $cword -eq 3 ]]; then
                return

            else
                options=('/logfile\:true' '/logfile\:false'
                '/structuredquery\:true' '/structuredquery\:false' '/query\:'
                '/overwrite\:true' '/overwrite\:false')
                options=$(_complement cmds[@] options[@])

            fi
            ;;

        gl|get-log)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_wevtutil_logs)

            else
                options=('/format\:xml' '/format\:text')
                options=$(_complement cmds[@] options[@])

            fi
            ;;

        gp|get-publisher)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_wevtutil_publishers)

            else
                options=('/getevents\:true' '/getevents\:false'
                '/getmessage\:true' '/getmessage\:false' '/format\:xml'
                '/format\:text')
                options=$(_complement cmds[@] options[@])

            fi
            ;;

        im|install-manifest)
            if [[ $cword -eq 2 ]]; then
                return

            else
                options=('/resourceFilePath\:' '/messageFilePath\:'
                '/parameterFilePath\:')
                options=$(_complement cmds[@] options[@])

            fi
            ;;

        qe|query-events)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_wevtutil_logs)

            else
                options=('/logfile\:true' '/logfile\:false'
                '/structuredquery\:true' '/structuredquery\:false' '/query\:'
                '/bookmark\:' '/savebookmark\:' '/reversedirection\:true'
                '/reversedirection\:false' '/format\:xml' '/format\:text'
                '/format\:renderedxml' '/locale\:' '/count\:' '/element\:')
                options=$(_complement cmds[@] options[@])

            fi
            ;;

        sl|set-log)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_wevtutil_logs)

            else
                options=('/enabled\:true' '/enabled\:false' '/quiet\:true'
                '/quiet\:false' '/filemax\:' '/isolation\:system'
                '/isolation\:application' '/isolation\:custom' '/logfilename\:'
                '/retention\:true' '/retention\:false' '/autobackup\:true'
                '/autobackup\:false' '/maxsize\:' '/level\:' '/keywords\:'
                '/config\:')
                options=$(_complement cmds[@] options[@])

            fi
            ;;

    esac

    COMPREPLY=( $( compgen -W '$options' -- $cur ) )
    [[ $COMPREPLY == *: ]] && compopt -o nospace
}

complete -o default -F _wevtutil wevtutil wevtutil.exe


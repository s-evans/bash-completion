#!/usr/bin/env sh

# TODO: [where [property comparison value [...]]] verb [property [, ...]] [switch [...]]
# TODO: caching of wmic output

_wmic_base_switches()
{
    wmic /? | sed '/^\//!d; s/[ \[].*//; s/./\l&/g'
}

_wmic_aliases()
{
    wmic /? | sed '1,/:/d; 1,/:/d; 1,/:/d; 1,/:/d; s/\r//g; /^$/,$d; s/ .*//; s/./\l&/g'
}

_wmic_alias_verbs()
{
    wmic $1 /? | sed '1,/:/d; 1,/:/d; s/\r//g; /^$/d; s/^[^ ]* //; s/ .*//; s/./\l&/g'
}

_wmic_alias_verb_switches()
{
    wmic $1 $2 /? | sed '/^\//!d; s/[(< \[].*//; s/./\l&/g; s/[:=]/\\&/g'
}

_wmic_alias_properties()
{
    wmic $1 $2 /? | sed '1,/^=/d; s/\r//g; /^$/,$d; s/ .*//; s/./\l&/g'
}

_wmic_alias_list_formats()
{
    wmic $1 list /? | sed '/ - /!d; /^\//d; s/ .*//; s/./\l&/g'
}

_wmic_alias_methods()
{
    wmic $1 call /? | sed '1,/^=/d; s/\W.*//; /^$/d; s/./\l&/g'
}

_wmic_users()
{
    local options IFS
    IFS=$'\n'
    options=$(wmic useraccount get name | sed -e '1d' -e 's/\r//' -e 's/ \+$//' -e '/\$$/ d' -e '/^$/ d')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\&/g' -e "/''/d"
}

_wmic()
{
    local cur prev words cword options IFS aliases current_alias current_verb cmds switches properties
    declare -i verb_position alias_position
    _init_completion
    cur=$(printf '%q' "${cur,,}")

    if [[ "$prev" == '/\?'* ]]; then
        return
    fi

    aliases=( $(_wmic_aliases) )
    alias_position=$(printf '%s\n' ${words[@]::cword} | (command grep -m 1 -h -Fxnf <(printf '%s\n' ${aliases[@]}) || echo 0) | sed 's/:.*//')

    if [[ $alias_position -ne 0 ]]; then
        alias_position=alias_position-1
        verb_position=alias_position+1
        current_alias=${words[alias_position]}
        current_verb=${words[verb_position]}
    fi

    if [[ -z "$current_alias" ]]; then
        case ${words[cword]} in

            # TODO: more completion possible here?
            /authority\\:*|/password\\:*|/record\\:*|/locale\\:*|/node\\:*|/role\\:*|/namespace\\:*)
                return
                ;;

            /user\\:*)
                IFS=$'\n'
                options=$(_wmic_users | sed -e 's/.*/\/user\\:&/')
                ;;

            /implevel\\:*)
                options='/implevel\:anonymous /implevel\:identify
                /implevel\:impersonate /implevel\:delegate'
                ;;

            /authlevel\\:*)
                options='/authlevel\:default /authlevel\:none
                /authlevel\:connect /authlevel\:call /authlevel\:pkt
                /authlevel\:pktintegrity /authlevel\:pktprivacy'
                ;;

            /privileges\\:*)
                options='/priveleges\:enable /priveleges\:disable'
                ;;

            /aggregate\\:*)
                options='/aggregate\:on /aggregate\:off'
                ;;

            /failfast\\:*)
                options='/failfast\:on /failfast\:off'
                ;;

            /interactive\\:*)
                options='/interactive\:on /interactive\:off'
                ;;

            /trace\\:*)
                options='/trace\:on /trace\:off'
                ;;

            /output\\:*)
                # TODO: filename completion
                options='/output\:stdout /output\:clipboard'
                ;;

            /append\\:*)
                # TODO: filename completion
                options='/append\:stdout /append\:clipboard'
                ;;

            *)
                cmds=( ${words[@]::cword} )
                switches=( $(_wmic_base_switches) )
                options=$(_complement cmds[@] switches[@])
                ;;

        esac

        options+=" ${aliases[*]} /?\\:brief /?\\:full "

    elif [[ $cword -eq $verb_position ]]; then
        IFS=$'\n'
        options=$(_wmic_alias_verbs $current_alias)
        options+=$'\nwhere'

    elif [[ $current_verb == where ]]; then
        # TODO: implement
        return

    else
        cmds=( ${words[@]:verb_position+1:cword} )
        local has_switch=$(printf '%s\n' ${cmds[@]} | sed '/^\//!d')

        # TODO: reduce the number of calls to wmic

        IFS=$'\n'
        switches=( $(_wmic_alias_verb_switches $current_alias $current_verb) )
        options=$(_complement cmds[@] switches[@])

        # TODO: completion for switch values

        if [[ -z "$has_switch" ]]; then
            case $current_verb in

                call)
                    # TODO: complete method arguments
                    if [[ $cword -eq $verb_position+1 ]]; then
                        options+=$'\n'$(_wmic_alias_methods $current_alias)
                    fi
                    ;;

                list)
                    if [[ $cword -eq $verb_position+1 ]]; then
                        options+=$'\n'$(_wmic_alias_list_formats $current_alias)
                    fi
                    ;;

                get)
                    properties=( $(printf '%s,\n' $(_wmic_alias_properties $current_alias $current_verb)) )
                    options+=$'\n'$(_complement cmds[@] properties[@])
                    ;;

                set)
                    # TODO: complete assignment operator and skip values?
                    # TODO: comma separate properties list?
                    options+=$'\n'$(_wmic_alias_properties $current_alias $current_verb)
                    ;;

                create)
                    # TODO: complete assignment operator and skip values?
                    # TODO: comma separate properties list?
                    options+=$'\n'$(_wmic_alias_properties $current_alias $current_verb)
                    ;;

                *)
                    ;;

            esac
        fi
    fi

    COMPREPLY=( $( compgen -W '$options' -- $cur ) )
    [[ $COMPREPLY == /*: ]] && compopt -o nospace
}

complete -o default -F _wmic wmic wmic.exe


#!/usr/bin/env sh

_sc_inactive_services()
{
    local IFS options
    IFS=$'\n'
    options=$(sc query state\= inactive | sed -e '/^SERV/!d' -e 's/^[^ ]\+ //')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\&/g' -e "/''/d"
}

_sc_active_services()
{
    local IFS options
    IFS=$'\n'
    options=$(sc query | sed -e '/^SERV/!d' -e 's/^[^ ]\+ //')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\&/g' -e "/''/d"
}

_sc_services()
{
    local services IFS
    IFS=$'\n'
    options=$(sc query state\= all | sed -e '/^SERV/!d' -e 's/^[^ ]\+ //')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\&/g' -e "/''/d"
}

_sc()
{
    local cur prev words cword options IFS found cmd
    _init_completion

    if [[ $prev == '/?' ]]; then
        return
    fi

    cur=$(printf '%q' "${cur,,}")

    if [[ $cword -eq 1 ]] ; then
        options="query queryex start pause interrogate continue stop \
            config description failure failureflag sidtype privs qc \
            qdescription qfailure qfailureflag qsidtype qprivs qtriggerinfo \
            qpreferrednode delete create control sdshow sdset showsid \
            triggerinfo preferrednode getdisplayname getkeyname enumdepend /?"
        COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
        return
    fi

    # TODO: fix some of the case statements below

    local cmds=( ${words[@]::cword} ) 

    # TODO: suggest computer names if cword -eq 1 and words[1] == \\*
    # TODO: change the case statement below to find the command at words[2] if words[1] == \\*

    # Command-specific arguments
    case ${words[1]} in

        query|queryex)
            case $prev in

                type\\=)
                    options='all driver service userservice'
                    ;;

                state\\=)
                    options='all inactive'
                    ;;

                group\\=)
                    # TODO: list groups
                    options=''
                    ;;

                bufsize\\=|ri\\=)
                    return
                    ;;

                *)
                    IFS=$'\n'

                    # TODO: cull the options list if used
                    options+=$'\n''type\='
                    options+=$'\n''state\='
                    options+=$'\n''bufsize\='
                    options+=$'\n''ri\='
                    options+=$'\n''group\='

                    if [[ $cword -eq 2 ]]; then
                        options+=$'\n'$(_sc_services)
                    fi

                    if [[ $cword -gt 2 && ${words[2]} != *= ]]; then
                        options=''
                    fi
                    ;;
            esac

            ;;

        start|continue)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_inactive_services)
            fi
            ;;

        stop|pause)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_active_services)
            fi
            ;;

        interrogate|description|qc|qdescription|qfailure|qfailureflag|qsidtype|qprivs|qtriggerinfo|qpreferrednode|showsid|getdisplayname|getkeyname|enumdepend|delete)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_services)
            fi
            ;;

        config|create)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_services)

            else
                case $prev in

                    binpath\\=)
                        return
                        ;;

                    depend\\=)
                        # TODO: forwardslash separated
                        IFS=$'\n'
                        options=$(_sc_services)
                        ;;

                    password\\=|displayname\\=)
                        return
                        ;;

                    obj\\=)
                        # TODO: get objects?
                        options=''
                        ;;

                    group\\=)
                        # TODO: get groups?
                        options=''
                        ;;

                    tag\\=)
                        options='yes no'
                        ;;

                    error\\=)
                        options='normal severe critical ignore'
                        ;;

                    start\\=)
                        options='boot system auto demand disabled delayed-auto'
                        ;;

                    type\\=)
                        options='own share interact kernel filesys rec'
                        ;;

                    *)
                        options=( 'type\=' 'start\=' 'error\=' 'group\=' 'binpath\='
                        'tag\=' 'depend\=' 'obj\=' 'displayname\=' 'password\=')
                        options=$(_complement cmds[@] options[@])
                        ;;

                esac
            fi
            ;;

        control)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_services)

            elif [[ $cword -eq 3 ]]; then
                options="paramchange netbindadd netbindremove netbindenable \
                    netbinddisable"
            fi
            ;;

        failure)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_services)

            else
                case $prev in
                    reset\\=|reboot\\=|command\\=)
                        return
                        ;;

                    actions\\=)
                        # TODO: could be more detailed...
                        options="run restart reboot"
                        ;;

                    *)
                        options=('reset\=' 'reboot\=' 'command\=' 'actions\=')
                        options=$(_complement cmds[@] options[@])
                        ;;
                esac
            fi
            ;;

        failureflag)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_services)

            elif [[ $cword -eq 3 ]]; then
                # TODO: list flags?
                options=''

            fi
            ;;

        sidtype)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_services)

            elif [[ $cword -eq 3 ]]; then
                options="none unrestricted restricted"
            fi
            ;;

        privs)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_services)

            else
                # TODO: subsequent completions replace the current option instead of appending to it
                cur=$(echo "$cur" | sed -e 's,[^/]*/,,g')
                options="seassignprimarytokenprivilege/ seauditprivilege/
                    sebackupprivilege/ sechangenotifyprivilege/
                    secreateglobalprivilege/ secreatepagefileprivilege/
                    secreatepermanentprivilege/ secreatesymboliclinkprivilege/
                    secreatetokenprivilege/ sedebugprivilege/
                    seenabledelegationprivilege/ seimpersonateprivilege/
                    seincreasebasepriorityprivilege/ seincreasequotaprivilege/
                    seincreaseworkingsetprivilege/ seloaddriverprivilege/
                    selockmemoryprivilege/ semachineaccountprivilege/
                    semanagevolumeprivilege/ seprofilesingleprocessprivilege/
                    serelabelprivilege/ seremoteshutdownprivilege/
                    serestoreprivilege/ sesecurityprivilege/
                    seshutdownprivilege/ sesyncagentprivilege/
                    sesystemenvironmentprivilege/ sesystemprofileprivilege/
                    sesystemtimeprivilege/ setakeownershipprivilege/
                    setcbprivilege/ setimezoneprivilege/
                    setrustedcredmanaccessprivilege/ seundockprivilege/
                    seunsolicitedinputprivilege/"

            fi
            ;;

        # TODO: might be able to combine the cases below

        sdshow)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_services)

            elif [[ $cword -eq 3 ]]; then
                # TODO: SDDL?
                options=''

            fi
            ;;

        sdset)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_services)

            elif [[ $cword -eq 3 ]]; then
                # TODO: SDDL?
                options=''

            fi
            ;;

        triggerinfo)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_services)

            else
                # TODO: get actual UUIDs and HwIds from the system
                options="start/device/ start/custom/
                    stop/custom/ start/strcustom/
                    stop/strcustom/ start/lvlcustom/
                    stop/lvlcustom/ start/kwanycustom/
                    stop/kwanycustom/ start/kwallcustom/
                    stop/kwallcustom/ start/networkon stop/networkoff
                    start/domainjoin stop/domainleave start/portopen/parameter
                    stop/portclose/parameter start/machinepolicy start/userpolicy
                    start/rpcinterface/UUID start/namedpipe/pipename delete"

            fi
            ;;

        preferrednode)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_sc_services)

            elif [[ $cword -eq 3 ]]; then
                # TODO: list nodes?
                options=''

            fi
            ;;

    esac

    COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
    [[ $COMPREPLY == */ ]] && compopt -o nospace
}

complete -o default -F _sc sc sc.exe


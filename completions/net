#!/usr/bin/env sh

_net_inactive_services()
{
    local IFS options
    IFS=$'\n'
    options=$(sc query state\= inactive | sed -e '/^SERV/!d' -e 's/^[^ ]\+ //')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_net_active_services()
{
    local IFS options
    IFS=$'\n'
    options=$(sc query | sed -e '/^SERV/!d' -e 's/^[^ ]\+ //')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_windows_net_users()
{
    local IFS options
    IFS=$'\n'
    options=$(wmic useraccount get name | sed -e '1d' -e 's/\r//' -e 's/ \+$//' -e '/\$$/ d' -e '/^$/ d')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_net_localgroup()
{
    local IFS options
    IFS=$'\n'
    options=$(net localgroup | sed -e '/^\*/!d' -e 's/^\*//')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_windows_net()
{
    local cur prev words cword options IFS
    _init_completion
    cur=$(printf '%q' "${cur,,}")

    if [[ $cword -eq 1 ]] ; then
        COMPREPLY=( $( compgen -W 'accounts computer config continue file group
        helpmsg localgroup pause session share start statistics stop time
        use user view' -- $cur ) )
        return
    fi

    if [[ $prev == "?" ]]; then
        return
    fi

    # Command-specific arguments
    case ${words[1]} in

        accounts)
            # TODO: position and prev
            options='/forcelogoff\: /minpwlen\: /maxpwage\: /minpwage\:
            /uniquepw\: /domain ?'
            ;;

        computer)
            if [[ $cword -eq 3 ]]; then
                # TODO: list availble computer names
                options=''
            elif [[ $cword -eq 3 ]]; then
                options='/add /del'
            fi
            ;;

        config)
            if [[ $cword -eq 2 ]]; then
                options='server workstation'
            elif [[ $prev == server ]]; then
                # TODO: implement
                options=''
            elif [[ $prev == workstation ]]; then
                # TODO: implement
                options=''
            fi
            ;;

        file)
            if [[ $cword -eq 2 ]]; then
                # TODO: list available file ids
                options=''
            elif [[ $cword -eq 3 ]]; then
                options='/close'
            fi
            ;;

        localgroup)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_net_localgroup)
            elif [[ $cword -ge 3 ]]; then
                # TODO: implement
                IFS=$'\n'
                options=$(_windows_net_users)
                options+=$'\n''/comment\:'$'\n''/delete'$'\n''/domain'$'\n''/add'
            fi
            ;;

        session)
            if [[ $cword -gt 2 ]]; then
                # TODO: list possible computer names
                options=''
            elif [[ $cword -gt 2 ]]; then
                options='/delete /list ?'
            fi
            ;;

        share)
            # TODO: implement
            options='?'
            ;;

        continue|start)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_net_inactive_services)
            fi
            ;;

        pause|stop)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_net_active_services)
            fi
            ;;

        statistics)
            if [[ $cword -eq 2 ]]; then
                options='server workstation'
            fi
            ;;

        time)
            # TODO: position and prev
            options='/set /domain /rtsdomain ?'
            ;;

        use)
            # TODO: position and prev
            # TODO: list recents
            options='/persistent\:yes /persistent\:no /delete /savecred
            /smartcard /user: ?'
            ;;

        user)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_windows_net_users)
                options+=$'\n''?'$'\n''/domain'
            else
                # TODO: implement
                options='/delete /add /domain /active\:yes /active\:no
                /times\:'
            fi

            # TODO: better positional argument support
            # TODO: cull the list based on options that have been used
            ;;

        view)
            # TODO: implement
            options=''
            ;;

    esac

    COMPREPLY=( $(compgen -W '$options' -- $cur ) )
    [[ $COMPREPLY == *: ]] && compopt -o nospace
}

complete -o default -F _windows_net net net.exe


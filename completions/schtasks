#!/usr/bin/env sh

# TODO: mutual exclusivity and dependency of options

_schtasks_event_channels()
{
    local options IFS
    IFS=$'\n'
    options=$(wevtutil el | sed -e 's/\r//')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_schtasks_computer_names()
{
    local options=$(printf '%q ' $(net view /all | sed -e '/^\\\\/!d' -e 's/ .*//'))
    echo ${options,,}
}

_schtasks_users()
{
    local IFS options
    IFS=$'\n'
    options=$(wmic useraccount get name | sed -e '1d' -e 's/\r//' -e 's/ \+$//' -e '/\$$/ d' -e '/^$/ d')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\&/g -e "/''/d"'
}

_get_schtasks()
{
    local IFS options
    IFS=$'\n'
    options=$(schtasks /query /fo list | sed -e '/^Task/ !d' -e 's/^[^ ]\+ \+//')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\&/g' -e "/''/d"
}

_schtasks()
{
    local cur prev words cword options IFS cmds
    _init_completion
    cur=$(printf '%q' "${cur,,}")

    if [[ $cword -eq 1 ]] ; then
        COMPREPLY=( $( compgen -W '/run /end /create /delete /query /change
        /showsid' -- "$cur" ) )
        return
    fi

    if [[ "$prev" == "/?" ]]; then
        return
    fi

    cmds=( ${words[@]::cword} ) 

    # Command-specific arguments
    case ${words[1]} in

        /run)
            case "$prev" in

                /s|/p)
                    return
                    ;;

                /u)
                    IFS=$'\n'
                    options=$(_schtasks_users)
                    ;;

                /tn)
                    IFS=$'\n'
                    options=$(_get_schtasks)
                    ;;

                *)
                    options=('/s' '/u' '/p' '/i' '/tn' '/hresult')
                    options=$(_complement cmds[@] options[@])
                    ;;

            esac
            ;;

        /end)
            case "$prev" in

                /s|/p)
                    return
                    ;;

                /u)
                    IFS=$'\n'
                    options=$(_schtasks_users)
                    ;;

                /tn)
                    IFS=$'\n'
                    options=$(_get_schtasks)
                    ;;

                *)
                    options=('/s' '/u' '/p' '/tn' '/hresult')
                    options=$(_complement cmds[@] options[@])
                    ;;

            esac
            ;;

        /create)
            case "$prev" in

                /rp|/p|/xml)
                    return
                    ;;

                /tr)
                    # TODO: pass off to another completion function?
                    return
                    ;;

                /mo)
                    # TODO: base completion off of the given schedule type, if available
                    # MINUTE:  1 - 1439 minutes.
                    # HOURLY:  1 - 23 hours.
                    # DAILY:   1 - 365 days.
                    # WEEKLY:  weeks 1 - 52.
                    # ONCE:    No modifiers.
                    # ONSTART: No modifiers.
                    # ONLOGON: No modifiers.
                    # ONIDLE:  No modifiers.
                    # MONTHLY: 1 - 12, or FIRST, SECOND, THIRD, FOURTH, LAST, LASTDAY.
                    # ONEVENT:  XPath event query string.
                    return
                    ;;

                /ri)
                    options='1 599940'
                    ;;

                /s)
                    IFS=$'\n'
                    options=$(_schtasks_computer_names)
                    ;;

                /ec)
                    IFS=$'\n'
                    options=$(_schtasks_event_channels)
                    ;;

                /i)
                    options=$(printf '%d ' $(seq 1 999))
                    ;;

                /delay)
                    if [[ "$cur" != *:* ]]; then
                        options=$(printf '%04d\: ' $(seq 0 10))

                    elif [[ "$cur" == *:* ]]; then
                        options=$(printf "${cur%:*}:%02d " $(seq 0 59))

                    fi
                    ;;

                /ed|/sd)
                    if [[ "$cur" != ??/* ]]; then
                        options=$(printf '%02d/ ' $(seq 1 12))

                    elif [[ "$cur" != ??/??/* ]]; then
                        options=$(printf "${cur%/*}/%02d/ " $(seq 1 31))

                    elif [[ "$cur" == ??/??/* ]]; then
                        options=${cur%/*}/$(date +%Y)

                    fi
                    ;;

                /du|/et|/st)
                    if [[ "$cur" != *:* ]]; then
                        options=$(printf '%02d\: ' $(seq 0 23))

                    elif [[ "$cur" == *:* ]]; then
                        options=$(printf "${cur%%:*}:%02d " $(seq 0 59))

                    fi
                    ;;

                /rl)
                    options='limited highest'
                    ;;

                /sc)
                    options='minute hourly daily weekly monthly once onstart onlogon onidle onevent'
                    ;;

                /m)
                    options='jan feb mar apr may jun jul aug sep oct nov dec \*'
                    ;;

                /d)
                    # TODO: only display for weekly tasks
                    options='mon tue wed thu fri sat sun'

                    # TODO: only display for monthly tasks
                    options+=$(printf ' %s' $(seq 1 31))

                    # TODO: always display
                    options+=' \*'
                    ;;

                /ru|/u)
                    IFS=$'\n'
                    options=$(_schtasks_users)
                    options+=$'\n''nt\ authority\\system'
                    options+=$'\n''nt\ authority\\localservice'
                    options+=$'\n''nt\ authority\\networkservice'
                    ;;

                /tn)
                    IFS=$'\n'
                    options=$(_get_schtasks)
                    ;;

                *)
                    options=('/s' '/u' '/p' '/tn' '/ru' '/sc' '/mo' '/d' '/m'
                    '/i' '/ec' '/rp' '/tr' '/st' '/ri' '/et' '/du' '/k' '/sd'
                    '/ed' '/it' '/np' '/xml' '/v1' '/f' '/rl' '/z' '/delay'
                    '/hresult')
                    options=$(_complement cmds[@] options[@])
                    ;;

            esac
            ;;


        /delete)
            case "$prev" in

                /s|/p)
                    return
                    ;;

                /u)
                    IFS=$'\n'
                    options=$(_schtasks_users)
                    ;;

                /tn)
                    IFS=$'\n'
                    options=$(_get_schtasks)
                    ;;

                *)
                    options=('/s' '/u' '/p' '/f' '/tn' '/hresult')
                    options=$(_complement cmds[@] options[@])
                    ;;

            esac
            ;;

        /query)
            case "$prev" in

                /s|/p)
                    return
                    ;;

                /u)
                    IFS=$'\n'
                    options=$(_schtasks_users)
                    ;;

                /xml)
                    options='one'
                    ;;

                /fo)
                    options='table list csv'
                    ;;

                /tn)
                    IFS=$'\n'
                    options=$(_get_schtasks)
                    ;;

                *)
                    options=('/s' '/u' '/p' '/fo' '/xml' '/nh' '/v' '/tn' '/hresult')
                    options=$(_complement cmds[@] options[@])
                    ;;

            esac
            ;;

        /change)
            case "$prev" in

                /rp|/p)
                    return
                    ;;

                /tr)
                    # TODO: pass off to another completion function?
                    return
                    ;;

                /ri)
                    options='1 599940'
                    ;;

                /delay)
                    if [[ "$cur" != *:* ]]; then
                        options=$(printf '%04d\: ' $(seq 0 10))

                    elif [[ "$cur" == *:* ]]; then
                        options=$(printf "${cur%:*}:%02d " $(seq 0 59))

                    fi
                    ;;

                /rl)
                    options='limited highest'
                    ;;

                /ec)
                    IFS=$'\n'
                    options=$(_schtasks_event_channels)
                    ;;

                /s)
                    IFS=$'\n'
                    options=$(_schtasks_computer_names)
                    ;;

                /ed|/sd)
                    if [[ "$cur" != ??/* ]]; then
                        options=$(printf '%02d/ ' $(seq 1 12))

                    elif [[ "$cur" != ??/??/* ]]; then
                        options=$(printf "${cur%/*}/%02d/ " $(seq 1 31))

                    elif [[ "$cur" == ??/??/* ]]; then
                        options=${cur%/*}/$(date +%Y)

                    fi
                    ;;

                /du|/et|/st)
                    if [[ "$cur" != *:* ]]; then
                        options=$(printf '%02d\: ' $(seq 0 23))

                    elif [[ "$cur" == *:* ]]; then
                        options=$(printf "${cur%%:*}:%02d " $(seq 0 59))

                    fi
                    ;;

                /ru|/u)
                    IFS=$'\n'
                    options=$(_schtasks_users)
                    ;;

                /tn)
                    IFS=$'\n'
                    options=$(_get_schtasks)
                    ;;

                *)
                    options=('/s' '/u' '/p' '/tn' '/ru' '/rp'
                    '/tr' '/st' '/ri' '/et' '/du' '/k' '/sd' '/ed'
                    '/it' '/rl' '/enable' '/disable' '/z' '/delay'
                    '/hresult')
                    options=$(_complement cmds[@] options[@])
                    ;;

            esac
            ;;

        /showsid)
            case "$prev" in

                /tn)
                    IFS=$'\n'
                    options=$(_get_schtasks)
                    ;;

                *)
                    options=('/tn' '/hresult')
                    options=$(_complement cmds[@] options[@])
                    ;;

            esac
            ;;

    esac

    COMPREPLY=( $(compgen -W '$options' -- "$cur" ) )
    [[ $COMPREPLY == *: ]] && compopt -o nospace
    [[ $COMPREPLY == */ ]] && compopt -o nospace
}

complete -o default -F _schtasks schtasks schtasks.exe


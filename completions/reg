#!/usr/bin/env sh

_reg_keys()
{
    local IFS options

    # get candidate keys
    IFS=$'\n'
    options=$(_windows_reg_keys $key)

    # unescape backslashes and then escape the entire string
    cur=$(printf %q ${cur//\\\\/\\})

    # make key lowercase
    cur=${cur,,}

    # attempt to get a completion
    COMPREPLY=( $(compgen -W '$options' -- $cur) )

    # if no completion, try again with more backslashes
    [[ -z $COMPREPLY ]] && COMPREPLY=( $(compgen -W '$options' -- $(printf %q $cur)) )

    # keep completion rolling
    [[ $COMPREPLY == *\\ ]] && compopt -o nospace
}

_reg_values()
{
    local IFS options
    IFS=$'\n'
    options=$(_windows_reg_values $key)
    COMPREPLY=( $(compgen -W '$options' -- $(printf %q $cur) ) )
}

_windows_reg_keys()
{
    local tmp options IFS

    # process the string so that the reg utility will understand it
    tmp=$(echo "$1" | sed -e 's/\\[^\]*$//')

    # query for additional keys
    options=$(reg query "$tmp" /f "*" /k 2> /dev/null | sed -e '1d' -e '$d' -e 's/$/\\/')

    # escape bash tokenizer strings and separate with newlines
    IFS=$'\n'
    options=$(printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d")

    # create additional completions with short root key names for convenience
    echo "$options" | sed -e 's/^hkey_local_machine/hklm/' -e \
        's/^hkey_current_user/hkcu/' -e 's/^hkey_current_config/hkcc/' -e \
        's/^hkey_users/hku/'

    # return as newline separated values
    echo "$options"

    # return root keys
    echo 'hkey_local_machine\\'
    echo 'hklm\\'
    echo 'hkey_current_user\\'
    echo 'hkcu\\'
    echo 'hkey_current_config\\'
    echo 'hkcc\\'
    echo 'hkey_users\\'
    echo 'hku\\'
    echo '/?'
}

_windows_reg_values()
{
    local options IFS
    IFS=$'\n'

    # query for values
    options=$(reg query "$1" /f "*" /d 2> /dev/null | sed -e '1,2d' -e '$d' -e 's/^[ ]\+//' -e '/^(Default)/ d' -e 's/    REG_.*$//g' )

    # make lowercase
    # escape bash tokenizer strings and separate with newlines
    # escape bash completion word breaks that aren't otherwise escaped by "printf '%q'"
    # remove the quoted blank string that occurs if there are no values echo "${options,,}" | sed -e 's/[:=]/\\\&/g'
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

# TODO: mutually exclusive options (ie. reg:32 and reg:64)
# TODO: dependent options (ie. /k /d /c /e are dependent upon /f)
# TODO: fix option culling loops for escaped characters

_reg()
{
    local cur prev words cword split options key IFS cmds
    _init_completion || return

    if [[ $cword -eq 1 ]] ; then
        COMPREPLY=( $( compgen -W 'query add delete copy save restore load
        unload compare export import flags /?' -- $cur ) )
        return
    fi

    if [[ $prev == "/?" ]]; then
        return
    fi

    cmds=( ${words[@]::cword} ) 
    key=$(printf %b ${words[2]})

    case ${words[1]} in

        query)
            if [[ $cword -eq 2 ]]; then
                _reg_keys
                return
            fi

            if [[ "$prev" == "/v" ]]; then
                _reg_values
                return
            fi

            if [[ "$prev" == "/se" || "$prev" == "/f" ]]; then
                return
            fi

            if [[ "$prev" == "/t" ]]; then
                COMPREPLY=( $(compgen -W 'reg_sz reg_multi_sz reg_expand_sz
                reg_dword reg_qword reg_binary reg_none' -- $cur ) )
                return
            fi

            options=( '/v' '/ve' '/s' '/f' '/k' '/d' '/c' '/e' '/t' '/z' '/se'
            '/reg\:32' '/reg\:64' )
            options=$(_complement cmds[@] options[@])
            ;;

        add)
            if [[ $cword -eq 2 ]]; then
                _reg_keys
                return
            fi

            if [[ "$prev" == "/v" ]]; then
                _reg_values
                return
            fi

            if [[ "$prev" == "/s" || "$prev" == "/d" ]]; then
                return
            fi

            if [[ "$prev" == "/t" ]]; then
                COMPREPLY=( $(compgen -W 'reg_sz reg_multi_sz reg_expand_sz
                reg_dword reg_qword reg_binary reg_none' -- $cur ) )
                return
            fi

            options=( '/v' '/ve' '/s' '/f' '/d' '/t' '/s' '/reg\:32' '/reg\:64')
            options=$(_complement cmds[@] options[@])
            ;;

        delete)
            if [[ $cword -eq 2 ]]; then
                _reg_keys
                return
            fi

            if [[ "$prev" == "/v" ]]; then
                _reg_values
                return
            fi

            # cull the list of switches if they've been used
            options=( '/v' '/ve' '/va' '/f' '/reg\:32' '/reg\:64' )
            options=$(_complement cmds[@] options[@])
            ;;

        copy)
            if [[ $cword -eq 3 || $cword -eq 2 ]]; then
                _reg_keys
                return
            fi

            # cull the list of switches if they've been used
            options=( "/s" "/f" "/reg\:32" "/reg\:64" )
            options=$(_complement cmds[@] options[@])
            ;;

        export|save)
            if [[ $cword -eq 2 ]]; then
                _reg_keys
                return
            fi

            if [[ $cword -eq 3 ]]; then
                return
            fi

            # cull the list of switches if they've been used
            options=( "/y" "/reg\:32" "/reg\:64" )
            options=$(_complement cmds[@] options[@])
            ;;

        load|restore)
            if [[ $cword -eq 2 ]]; then
                _reg_keys
                return
            fi

            if [[ $cword -eq 3 ]]; then
                return
            fi

            # cull the list of switches if they've been used
            options=( "/reg\:32" "/reg\:64" )
            options=$(_complement cmds[@] options[@])
            ;;

        unload)
            if [[ $cword -eq 2 ]]; then
                _reg_keys
                return
            fi
            ;;

        compare)
            if [[ $cword -eq 3 || $cword -eq 2 ]]; then
                _reg_keys
                return
            fi

            if [[ "$prev" == "/v" ]]; then
                _reg_values
                return
            fi

            # cull the list of switches if they've been used
            options=( '/v' '/ve' '/s' '/oa' '/od' '/os' '/on' '/reg\:32'
            '/reg\:64' )
            options=$(_complement cmds[@] options[@])
            ;;

        import)
            if [[ $cword -eq 2 ]]; then
                return
            fi

            if [[ $cword -eq 3 ]]; then
                options='/reg\:32 /reg\:64'
            fi
            ;;

        flags)
            if [[ $cword -eq 2 ]]; then
                _reg_keys
                return
            fi

            if [[ "${words[3]}" == "query" ]]; then
                return
            fi

            if [[ $cword -eq 3 ]]; then
                COMPREPLY=( $(compgen -W 'query set' -- $cur ) )
                return
            fi

            # cull the list of switches if they've been used
            options=( 'dont_virtualize' 'dont_silent_fail' 'recurse_flag'
            '/reg\:32' '/reg\:64')
            options=$(_complement cmds[@] options[@])
            ;;

    esac

    COMPREPLY=( $(compgen -W '$options' -- $cur ) )
    [[ $COMPREPLY == *\\ ]] && compopt -o nospace
}

complete -o default -F _reg reg reg.exe


#!/usr/bin/env sh

_net_computer_names()
{
    local options=$(printf '%q ' $(net view /all | sed -e '/^\\\\/!d' -e 's/ .*//'))
    echo ${options,,}
}

_net_inactive_services()
{
    local IFS options
    IFS=$'\n'
    options=$(sc query state\= inactive | sed -e '/^SERV/!d' -e 's/^[^ ]\+ //')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_net_active_services()
{
    local IFS options
    IFS=$'\n'
    options=$(sc query | sed -e '/^SERV/!d' -e 's/^[^ ]\+ //')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_windows_net_users()
{
    local IFS options
    IFS=$'\n'
    options=$(wmic useraccount get name | sed -e '1d' -e 's/\r//' -e 's/ \+$//' -e '/\$$/ d' -e '/^$/ d')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_net_localgroup()
{
    local IFS options
    IFS=$'\n'
    options=$(net localgroup | sed -e '/^\*/!d' -e 's/^\*//')
    printf '%q\n' ${options,,} | sed -e 's/[:=]/\\\&/g' -e "/''/d"
}

_windows_net()
{
    local cur prev words cword options IFS cmds
    _init_completion
    cur=$(printf '%q' "${cur,,}")

    if [[ $cword -eq 1 ]] ; then
        COMPREPLY=( $( compgen -W 'accounts computer config continue file group
        helpmsg localgroup pause session share start statistics stop time
        use user view' -- $cur ) )
        return
    fi

    if [[ $prev == "?" ]]; then
        return
    fi

    cmds=( ${words[@]::cword} ) 

    # Command-specific arguments
    case ${words[1]} in

        accounts)
            options=('/forcelogoff\:no' '/forcelogoff\:' '/minpwlen\:'
            '/maxpwage\:' '/minpwage\:' '/uniquepw\:' '/domain')
            options=$(_complement cmds[@] options[@])
            ;;

        computer)
            if [[ $cword -eq 2 ]]; then
                options=$(_net_computer_names)

            elif [[ $cword -eq 3 ]]; then
                options='/add /del'

            fi
            ;;

        config)
            if [[ $cword -eq 2 ]]; then
                options='server workstation'
            elif [[ $prev == server ]]; then
                options=('/autodisconnect\:' '/srvcomment\:' '/hidden\:yes'
                '/hidden\:no')
                options=$(_complement cmds[@] options[@])
            fi
            ;;

        file)
            if [[ $cword -eq 2 ]]; then
                # TODO: list available file ids
                options=''

            elif [[ $cword -eq 3 ]]; then
                options='/close'

            fi
            ;;

        localgroup)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_net_localgroup)
                options+=$'\n''/domain'

            elif [[ $cword -eq 3 ]]; then
                IFS=$'\n'
                options=$(_windows_net_users)
                options+=$'\n''/comment\:'$'\n''/delete'$'\n''/domain'$'\n''/add'

            elif [[ ${words[3]} == /add ]]; then
                options='/comment\: /domain'

            elif [[ ${words[3]} == /delete ]]; then
                options='/domain'

            elif [[ ${words[3]} == /comment\\:* ]]; then
                options='/domain'

            elif [[ $prev == /domain ]]; then
                return

            elif [[ $prev == /add ]]; then
                options='/domain'

            elif [[ $prev == /delete ]]; then
                options='/domain'

            else
                IFS=$'\n'
                options=$(_windows_net_users)
                options+=$'\n''/delete'$'\n''/domain'$'\n''/add'

            fi
            ;;

        session)
            if [[ $cword -eq 2 ]]; then
                options=$(_net_computer_names)

            elif [[ $cword -eq 3 ]]; then
                options='/delete /list'

            fi
            ;;

        share)
            if [[ $cword -eq 2 ]]; then
                # TODO: list share and device names
                options=''

            elif [[ ${words[2]} == *=* ]]; then
                # TODO: /grant should be username,permission
                options=('/grant\:full' '/grant\:change' '/grant\:read'
                '/users\:' '/unlimited' '/remark\:' '/cache\:manual'
                '/cache\:documents' '/cache\:programs' '/cache\:branchcache'
                '/cache\:none')
                options=$(_complement cmds[@] options[@])

            else
                options=('/users\:' '/unlimited' '/remark\:' '/cache\:manual'
                '/cache\:documents' '/cache\:programs' '/cache\:branchcache'
                '/cache\:none' '/delete')
                options=$(_complement cmds[@] options[@])

            fi
            ;;

        continue|start)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_net_inactive_services)
            fi
            ;;

        pause|stop)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_net_active_services)
            fi
            ;;

        statistics)
            if [[ $cword -eq 2 ]]; then
                options='server workstation'
            fi
            ;;

        time)
            if [[ $cword -eq 2 ]]; then
                # TODO: also suggest domains
                options=$(_net_computer_names)
                options=' /domain\: /domain /rtsdomain\: /rtsdomain '

            elif [[ $cword -eq 3 ]]; then
                options='/set'

            fi
            ;;

        use)
            if [[ $cword -eq 2 ]]; then
                # TODO: also list device names currently in use
                options='\* /persistent\:yes /persistent\:no'

            elif [[ ${words[2]} == /persistent\\:* ]]; then
                return

            elif [[ $cword -eq 3 ]]; then
                # TODO: do completion for shared resources and folders for each computer
                options=$(_net_computer_names)
                options+=' \* '

            elif [[ $cword -eq 4 ]]; then
                options='/home /user\: /smartcard /savecred /delete
                /persistent\:yes /persistent\:no'

            elif [[ ${word[4]} == /home ]]; then
                return

            else
                options=('/user\:' '/smartcard' '/savecred' '/delete'
                '/persistent\:yes' '/persistent\:no')
                options=$(_complement cmds[@] options[@])

            fi
            ;;

        user)
            if [[ $cword -eq 2 ]]; then
                IFS=$'\n'
                options=$(_windows_net_users)
                options+=$'\n''?'$'\n''/domain'

            elif [[ $cword -eq 3 ]]; then
                options='\* /delete /times\: /times\:all'

            elif [[ ${words[3]} == '/delete' ]]; then
                if [[ $cword -eq 4 ]]; then
                    options='/domain'
                fi

            elif [[ ${words[3]} == /times\\:* ]]; then
                return

            else
                options=('/comment\:' '/countrycode\:' '/expires\:' '/domain'
                '/expires\:never' '/fullname\:' '/homedir\:' '/passwordchg\:no'
                '/passwordchg\:yes' '/passwordreq\:no' '/passwordreq\:yes'
                '/logonpasswordchg\:yes' '/logonpasswordchg\:no' '/profilepath'
                '/profilepath\:' '/scriptpath\:' '/times\:' '/times\:all'
                '/usercomment\:' '/workstations\:')
                options=$(_complement cmds[@] options[@])
            fi
            ;;

        view)
            if [[ $cword -eq 2 ]]; then
                options=$(_net_computer_names)
                options+=' /all /domain /domain\: '

            elif [[ $cword -eq 3 && $prev != /all && $prev != /domain* ]]; then
                options='/cache'

            fi
            ;;

    esac

    COMPREPLY=( $(compgen -W '$options' -- $cur ) )
    [[ $COMPREPLY == *: ]] && compopt -o nospace
}

complete -o default -F _windows_net net net.exe

